# installs #{SHYFILE} into user specified directory
# This code runs in the DESTINATION Shoes, not in the packaging Shoes
require 'shoes/shy'
require 'fileutils'
require 'rubygems/package'
require 'shoes/winject'
require 'shoes/packshoes'
require 'yaml'
# not easy to debug. 
Shoes.app do
  shyname = File.basename("#{SHYFILE}")
  curloc = Dir.getwd()    # most likely to be a temp dir somewhere
  #Shoes::show_console
  shypath = File.join(curloc,shyname)
  shyfile = File.open(shypath,'rb')
  hdr = Shy.__hdr__(shyfile)
  # read the .yaml 
  @opts = YAML.load_file(File.basename(shypath,'.shy')+'.yaml')
  if File.exist? 'installer-icon.png'
    app.set_window_icon_path('installer-icon.png')
  else
    alert "Inform developer that they forgot to include an installer-icon.png"
  end
  gempack = File.exist? 'gempack.tgz'
  app.set_window_title "#{hdr.name} Installer"
  stack do
    para "#{hdr.name} version #{hdr.version} from #{hdr.creator}, requests that \
you pick a folder to put it's files in."
    flow do
      @dirfld = edit_line :width => 400 
      @dirfld.text = "#{ENV['HOME']}/Applications/#{File.basename(shyfile,'.shy')}"
      button "Select..." do
        @dirfld.text = ask_save_folder()
      end
    end
    if RUBY_PLATFORM  =~ /linux/
      para "Categories list. Separate with ';'. Must end with ';'"
      @catsfld = edit_line
    end
    if RUBY_PLATFORM =~ /mingw/
      flow do
        @opts['desklnk']= true
        @desklnk = check :checked => true do
          @opts['desklnk'] = @desklnk.checked?
        end
        para "Create Shortcut on Desktop?"
      end
      flow do 
        @opts['replicon'] = false
        @replicon = check :checked => false do
          @opts['replicon'] = @replicon.checked?
         end
        para "Delete Shoes from Desktop. Not recommended."
      end
    end
    if RUBY_PLATFORM =~ /darwin/ && ! File.exist?("/Applications/Shoes.app")
      # Running Shoes from somewhere else (aka custom-repack in a download dir)
      para "The Shoes Platform is not in /Applications. It will be created there."
      @opts['osxrepack'] = DIR
    end
    if gempack
      flow do
        @gemsOK = check :checked => true 
        para "Allow gems to be installed?"
      end
    end
    flow do
      button "Install #{hdr.name}" do
        mkdir_p @dirfld.text
        install_top = curloc
        app = ''
        if @opts['osxrepack']
          create_shoes
        end
        if gempack && @gemsOK.checked?
          gempack_helper 'gempack.tgz'
        end
        Dir.chdir @dirfld.text do
          if @opts['expandshy']
            extract shyfile
          else
            FileUtils.cp shyfile, '.'  
          end
          case RUBY_PLATFORM
          when /mingw/ 
            iconpath = Dir.glob("#{install_top}/*.ico")[0]
            if ! (File.exist? iconpath)
              alert "Developer #{hdr.creator} did not include an .ico file! Can not Install."
              quit
            end
            # Delete Shoes desktop .lnk
            if @opts['replicon'] 
              FileUtils.rm File.join("#{ENV['HOME']}",'Desktop/Shoes.lnk')
            end
            app = install_windows hdr, @dirfld.text, iconpath
            alert "Installed. Please launch from from Desktop or installation directory"
          when /darwin/
            iconpath = Dir.glob("#{install_top}/*.icns")[0]
            if ! (File.exist? iconpath)
              alert "Developer #{hdr.creator} did not include an .icns file! Can not Install."
              quit
            end
            app = install_osx hdr, @dirfld.text, iconpath
            alert "Installed. Please launch from where you installed it"
          else # assume linux
            iconpath = Dir.glob("#{install_top}/*.png")[0]
            app = install_linux hdr, @dirfld.text, iconpath, @catsfld.text
            alert "Installed. Check your menus. You may need to re-login"
          end
        end
        # still  in the install button context and its finished it's work
        # clean up. Lots of temps in Windows that have to be deleted
        quit
      end
    end
  end
  
  # all the install_OS methods return the full path to the app(.shy or .rb)
  # needed to launch it directly from Shoes.
  # current dir is set to installdir before calling
  #
  def install_windows hdr, installdir, iconpath
    # we want to create an .exe using the static/shoes-stub.exe and winject
    # and the .ico file and a tiny script. So it looks like an app.exe
    # The Tiny script launches the real script in the new directory
    # Butt ugly, but works.
    if @opts['expandshy']
      launch = hdr.launch
    else
      launch = File.basename(@opts['app'])
    end
    # launch is the real script. curloc is where it is.
    curloc = Dir.getwd
    tiny_script = "tiny-#{launch}"
    File.open(tiny_script, 'w') do |f|
      f.write "Dir.chdir(\"#{curloc}\") do\n"
      f.write "  eval(File.read(\"#{launch}\"))\n"
      f.write "end\n"
    end
    f = File.open(tiny_script, 'rb')
    inf = File.join(DIR, "static", "stubs", 'shoes-stub.exe')
    exe = Winject::EXE.new(inf)
    exe.inject_string(Winject::EXE::SHOES_APP_NAME, tiny_script)
    exe.inject_file(Winject::EXE::SHOES_APP_CONTENT, f.read)
    exe.inject_string(Winject::EXE::SHOES_DOWNLOAD_SITE, @opts['dnlhost'])
    exe.inject_string(Winject::EXE::SHOES_DOWNLOAD_PATH, @opts['dnlpath'])
    exe.inject_icons(iconpath)
    exepath = launch.gsub(/\.\w+$/, '') + ".exe"
    exe.save(exepath) 
    f.close
    # delete tiny_script
    FileUtils.rm tiny_script
    # Create a .lnk on the desktop - pointing to the .exe we built
    if @opts['desklnk']
      require 'win32/shortcut'
      exepath = File.join(curloc, exepath)
      Win32::Shortcut.new("#{ENV['HOME']}/Desktop/#{hdr.name}.lnk") do |s|
        s.description = hdr.name
        s.path = File.join exepath
        s.show_cmd = Win32::Shortcut::SHOWNORMAL
        s.working_directory = curloc
      end
    end
    # return path to Shoes/eval - NOT the created exe. 
    return "#{installdir}/#{launch}"
  end
  
  def install_osx hdr, installdir, iconpath
    name = File.basename(hdr.launch).gsub(/\.\w+$/, '')
    app_name = name.capitalize.gsub(/[-_](\w)/) { $1.capitalize }
    app_app = "#{app_name}.app"
    vers = [2, 0]
    tmp_dir = installdir
    FileUtils.mkdir_p(tmp_dir)
    
    icon_name = File.basename(iconpath).capitalize
    app_dir = File.join(tmp_dir, app_app)
    res_dir = File.join(tmp_dir, app_app, "Contents", "Resources")
    mac_dir = File.join(tmp_dir, app_app, "Contents", "MacOS")
    [res_dir, mac_dir].map { |x| FileUtils.mkdir_p(x) }
    FileUtils.cp(iconpath, File.join(app_dir,icon_name))
    FileUtils.cp(iconpath, File.join(res_dir,icon_name))
    File.open(File.join(app_dir, "Contents", "PkgInfo"), 'w') do |f|
      f << "APPL????"
    end

    # Make the Info.plist
    File.open(File.join(app_dir, "Contents", "Info.plist"), 'w') do |f|
      f << <<END
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleGetInfoString</key>
  <string>#{app_name} #{vers.join(".")}</string>
  <key>CFBundleExecutable</key>
  <string>#{name}-launch</string>
  <key>CFBundleIdentifier</key>
  <string>org.hackety.#{name}</string>
  <key>CFBundleName</key>
  <string>#{app_name}</string>
  <key>CFBundleIconFile</key>
  <string>#{icon_name}</string>
  <key>CFBundleShortVersionString</key>
  <string>#{vers.join(".")}</string>
  <key>CFBundleInfoDictionaryVersion</key>
  <string>6.0</string>
  <key>CFBundlePackageType</key>
  <string>APPL</string>
  <key>IFMajorVersion</key>
  <integer>#{vers[0]}</integer>
  <key>IFMinorVersion</key>
  <integer>#{vers[1]}</integer>
</dict>
</plist>
END
    end
    File.open(File.join(app_dir, "Contents", "version.plist"), 'w') do |f|
      f << <<END
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>BuildVersion</key>
  <string>1</string>
  <key>CFBundleVersion</key>
  <string>#{vers.join(".")}</string>
  <key>ProjectName</key>
  <string>#{app_name}</string>
  <key>SourceVersion</key>
  <string>#{Time.now.strftime("%Y%m%d")}</string>
</dict>
</plist>
END
    end
    # launch shy or .rb?
    if @opts['expandshy'] 
       launch = hdr.launch 
    else 
       launch = File.basename(@opts['app'])
    end
    File.open(File.join(mac_dir, "#{name}-launch"), 'wb') do |f|
      f << <<END
#!/bin/bash
APPPATH="${0%/*}"
this_dir=$APPPATH
unset DYLD_LIBRARY_PATH
APPPATH=/Applications/Shoes.app/Contents/MacOS
cd "$APPPATH"
DYLD_LIBRARY_PATH="$APPPATH"  SHOES_RUBY_ARCH="x86_64-linux" ./shoes-bin -f "#{installdir}/#{launch}"
END
    end
    FileUtils.chmod 0755, File.join(mac_dir, "#{name}-launch")
    # figure out return for direct launch from Shoes. 
    return "#{installdir}/#{launch}"
  end
  
  def install_linux  hdr, installdir, iconpath, cats
    # We are in the directory the user selected, aka installdir
    # create a menu using "stuff"
    hdir = ENV['HOME']
    cdir = Dir.getwd()
    FileUtils.cp iconpath, cdir
    if @opts['expandshy']
      dtname = hdr.launch.gsub(/\.rb$/,'.desktop')
      launch = hdr.launch
    else
      dtname = File.basename(@opts['app'],'.shy')+'.desktop'
      launch = File.basename(@opts['app'])
    end
    
    File.open(dtname,'w') do |f|
        f << "[Desktop Entry]\n"
        f << "Name=#{hdr.name}\n"
        f << "Exec=#{hdir}/.shoes/#{Shoes::RELEASE_NAME}/shoes #{installdir}/#{launch}\n"
        f << "StartupNotify=true\n"
        f << "Terminal=false\n"
        f << "Type=Application\n"
        f << "Comment=#{hdr.creator}\n"
        f << "Icon=#{cdir}/#{File.basename(iconpath)}\n"
        f << "Categories=Other;Applications;#{cats}\n"
    end
    if File.exists? '.local/share/Applications' 
      FileUtils.cp dtname, '.local/share/Applications' 
    end
    `xdg-desktop-menu install --novendor #{dtname}`
    
    # create an uninstall script - tricksy.
    appname = dtname.gsub(/\.desktop$/, '');
    File.open("#{appname}-uninstall.sh", 'w') do |f|
        f << "#!/bin/bash\n"
        f << "#pwd\n"
        f << "cd {launchdir}\n"
        f << "xdg-desktop-menu uninstall #{appname}.remove.desktop\n"
        f << "xdg-desktop-menu uninstall #{appname}.desktop\n"
        f << "cd ../\n"
        f << "rm -rf #{installdir}\n"
      end
    chmod "+x", "#{appname}-uninstall.sh"
      
    # create the uninstall menu (.destop file)
    File.open("#{appname}.remove.desktop",'w') do |f|
        f << "[Desktop Entry]\n"
        f << "Name=#{hdr.name} Uninstall\n"
        f << "Exec=#{installdir}/#{appname}-uninstall.sh\n"
        f << "StartupNotify=true\n"
        f << "Terminal=false\n"
        f << "Type=Application\n"
        f << "Comment=#{hdr.creator}\n"
        f << "Icon=#{cdir}/#{File.basename(iconpath)}\n"
        f << "Categories=Other;Applications;#{cats}\n"
    end
    # Create the uninstall menu
    `xdg-desktop-menu install --novendor #{appname}.remove.desktop`
    
    # Are we running from /tmp/selfgz[d]/shoes-bin (aka repack)
    # and shoes is not installed? 
    install_here = "#{ENV['HOME']}/.shoes/#{Shoes::RELEASE_NAME}"
    if DIR =~ /\/tmp\/selfgz/ && ! (File.exist? install_here)
      FileUtils.mkdir_p install_here
      Dir.glob("#{DIR}/*") do |p| 
       FileUtils.cp_r p, install_here
      end
    end
    
    return "#{installdir}/#{launch}"
  end
  
  # More OSX fun. Create /Applications/Shoes.app from the running #{DIR}
  # 
  def create_shoes 
    name = 'shoes'
    app_name = name.capitalize.gsub(/[-_](\w)/) { $1.capitalize }
    app_app = "#{app_name}.app"
    vers = [3, 0]
    tmp_dir = "/Applications"
    iconpath = "#{DIR}/static/Shoes.icns"
    
    icon_name = 'Shoes.icns'
    app_dir = File.join(tmp_dir, app_app)
    res_dir = File.join(tmp_dir, app_app, "Contents", "Resources")
    mac_dir = File.join(tmp_dir, app_app, "Contents", "MacOS")
    [res_dir, mac_dir].map { |x| FileUtils.mkdir_p(x) }
    FileUtils.cp(iconpath, File.join(app_dir,icon_name))
    FileUtils.cp(iconpath, File.join(res_dir,icon_name))
    File.open(File.join(app_dir, "Contents", "PkgInfo"), 'w') do |f|
      f << "APPL????"
    end
    # Copy running app
    Dir.glob("#{DIR}/*") do |f|
      FileUtils.cp_r f, mac_dir
    end
    # Make the Info.plist
    File.open(File.join(app_dir, "Contents", "Info.plist"), 'w') do |f|
      f << <<END
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleGetInfoString</key>
  <string>#{app_name} #{vers.join(".")}</string>
  <key>CFBundleExecutable</key>
  <string>#{name}-launch</string>
  <key>CFBundleIdentifier</key>
  <string>org.hackety.#{name}</string>
  <key>CFBundleName</key>
  <string>#{app_name}</string>
  <key>CFBundleIconFile</key>
  <string>#{icon_name}</string>
  <key>CFBundleShortVersionString</key>
  <string>#{vers.join(".")}</string>
  <key>CFBundleInfoDictionaryVersion</key>
  <string>6.0</string>
  <key>CFBundlePackageType</key>
  <string>APPL</string>
  <key>IFMajorVersion</key>
  <integer>#{vers[0]}</integer>
  <key>IFMinorVersion</key>
  <integer>#{vers[1]}</integer>
</dict>
</plist>
END
    end
    File.open(File.join(app_dir, "Contents", "version.plist"), 'w') do |f|
      f << <<END
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>BuildVersion</key>
  <string>1</string>
  <key>CFBundleVersion</key>
  <string>#{vers.join(".")}</string>
  <key>ProjectName</key>
  <string>#{app_name}</string>
  <key>SourceVersion</key>
  <string>#{Time.now.strftime("%Y%m%d")}</string>
</dict>
</plist>
END
    end

    File.open(File.join(mac_dir, "#{name}-launch"), 'wb') do |f|
      f << <<END
#!/bin/bash
APPPATH="${0%/*}"
this_dir=$APPPATH
unset DYLD_LIBRARY_PATH
APPPATH=/Applications/Shoes.app/Contents/MacOS
cd "$APPPATH"
DYLD_LIBRARY_PATH="$APPPATH"  SHOES_RUBY_ARCH="x86_64-linux" ./shoes-bin "$@"
END
    end
    FileUtils.chmod 0755, File.join(mac_dir, "#{name}-launch")
    # figure out return for direct launch from Shoes. 
  end
 
  def extract opened_file
    Gem::Package::TarReader.new( Zlib::GzipReader.new(opened_file)) do |tar|
      tar.each do |entry|
        dest = entry.full_name
	    if entry.directory?
	      FileUtils.rm_rf dest unless File.directory? dest
	      FileUtils.mkdir_p dest, :mode => entry.header.mode, :verbose => false
	    elsif entry.file?
	      FileUtils.rm_rf dest unless File.file? dest
	      File.open dest, "wb" do |f|
	        f.print entry.read
	       end
	       FileUtils.chmod entry.header.mode, dest, :verbose => false
	    elsif entry.header.typeflag == '2' #Symlink!
	      alert "Cannot convert Symlinks. Contact #{hdr.creator}"
	    end
      end
    end
  end
  
  def gem_copy_to_home srcdir, dest
    gems = Dir.glob("#{srcdir}/*/*")
    mkdir_p dest
    #return if !confirm "#{gems} from #{srcdir} to #{dest}"
    gems.each do |gempath|
      # look inside for the gem.build_complete
      gemn = File.split(gempath)[1]
      if File.exists? File.join(gempath,'gem.build_complete')
        extpath = File.join(dest, 'extensions', "#{Gem::Platform.local}", '2.1.0', gemn)
        puts extpath
        mkdir_p extpath
        cp File.join(gempath,'gem.build_complete'), extpath
      end
      # copy the gemspec
      specpath = File.join(dest, 'specifications')
      mkdir_p specpath
      specname = gemn+'.gemspec'
      cp File.join(gempath,'gemspec'), File.join(specpath, specname)
      # copy ext if we have one
      if File.exists? File.join(gempath, 'ext')
        puts "Copy ext #{gempath}"
        mkdir_p File.join(dest, 'gems', gemn)
        cp_r File.join(gempath, 'ext'), File.join(dest,'gems', gemn)
      end
      # copy lib if we have it
      if File.exists? File.join(gempath, 'lib')
        mkdir_p File.join(dest, 'gems', gemn)
        cp_r File.join(gempath, 'lib'), File.join(dest,'gems', gemn)
      end
    end
    gemlist = []
    gems.each {|g| gemlist << File.basename(g) }
    return gemlist
  end

  def gempack_helper tgzpath
    # make a temp directory and unpack the tgzpath into it
    # loop thru the 'special' gems in there and copy into GEM_DIR
    td = Dir.mktmpdir('gempack')
    tarf = File.open(tgzpath,'rb')
    Dir.chdir(td) do |d|
      PackShoes.tar_extract tarf # if confirm "Copy #{tgzpath} to #{GEM_DIR} via #{td}"
    end
    gem_copy_to_home td, GEM_DIR
    rm_r td
    return
  end
  
end
